{
  "version": 3,
  "sources": ["../db-helper.ts", "../node_modules/uuid/dist/esm/stringify.js", "../node_modules/uuid/dist/esm/rng.js", "../node_modules/uuid/dist/esm/native.js", "../node_modules/uuid/dist/esm/v4.js"],
  "sourcesContent": ["\r\nimport { GetItemCommand, PutItemCommand, QueryCommand } from '@aws-sdk/client-dynamodb';\r\nimport { DynamoDBDocumentClient, QueryCommandInput } from '@aws-sdk/lib-dynamodb';\r\nimport { randomBytes, createHmac, generateKeyPairSync  } from \"crypto\";\r\nimport { v4 } from 'uuid';\r\nimport { marshall, unmarshall } from \"@aws-sdk/util-dynamodb\";\r\n\r\nexport enum EntityType {\r\n    Family = 'Family',\r\n    User = 'User',\r\n    Recipe = 'Recipe',\r\n    Secret = 'Secret',\r\n}\r\n\r\nexport interface DBBase {\r\n    createdAt: string;\r\n    updatedAt: string;\r\n    entityType: EntityType;\r\n    PK: string;\r\n    SK: string;\r\n    id: string;\r\n    name: string;\r\n}\r\n\r\nexport interface DBRecipe extends DBBase {\r\n    familyId: string;\r\n    faimilyName: string;\r\n    preparation: string;\r\n    ingredients?: string;\r\n    imageUrl?: string;\r\n}\r\n\r\nexport interface DBUser extends DBBase {\r\n    familyId: string;\r\n    faimilyName: string;\r\n    password: string;\r\n}\r\n\r\nexport interface DBFamily extends DBBase { }\r\n\r\nexport interface CreateRecipeParams {\r\n    familyId: string;\r\n    familyName: string;\r\n    recipeName: string;\r\n    preparation: string;\r\n    ingredients?: string;\r\n    imageUrl?: string;\r\n}\r\n\r\nexport interface DBSecret {\r\n    id: string;\r\n    PK: string; // Partition key, could be the name or an identifier for the key pair\r\n    SK: string; // Sort key, can be a unique identifier or type of secret (e.g., 'public', 'private')\r\n    secret: string; // The PEM key string, could be public or private key\r\n    name: string; // A name or identifier for the secret (e.g., 'auth-jwt-key', 'auth-key-pair')\r\n    createdAt: string; // Date/time when the key was created\r\n    updatedAt: string; // Date/time when the key was last updated or rotated\r\n    entityType: EntityType;\r\n}\r\n\r\n\r\nexport interface ListRecipeParams {\r\n    familyId: string;\r\n    limit: number;\r\n    lastEvaluatedKey?: Record<string, any>\r\n}\r\n\r\nexport interface ListRecipesResponse {\r\n    recipes: DBRecipe[];\r\n    lastEvaluatedKey?: { [key: string]: any };\r\n}\r\n\r\n\r\nexport class Database {\r\n    constructor(public readonly dynamoDB: DynamoDBDocumentClient, public readonly tableName: string){}\r\n\r\n    public static makePK(entity: EntityType, value: string): string {\r\n        switch (entity) {\r\n            case EntityType.Family:\r\n                return `F#${value}`; // For families, PK is FAMILY#<familyId>\r\n            case EntityType.User:\r\n                return `UN#${value}`; // For users, PK is USER#<userName>\r\n            case EntityType.Recipe:\r\n                return `F#${value}`; // For recipes, PK is FAMILY#<familyId> (assuming recipes belong to families)\r\n            case EntityType.Secret:\r\n                return `S#${value}`; // For secrets, PK is SECRET#<secretId>\r\n            default:\r\n                throw new Error(`Unknown entity type: ${entity}`);\r\n        }\r\n    }\r\n\r\n    public static makeSK(entity: EntityType, value: string): string {\r\n        switch (entity) {\r\n            case EntityType.Family:\r\n                return `FN#${value}`;\r\n            case EntityType.User:\r\n                return `UN#${value}`;\r\n            case EntityType.Recipe:\r\n                return `R#${value}`; // Recipe sort key is RECIPE#<recipeId>\r\n            case EntityType.Secret:\r\n                return `S#${value}`;\r\n            default:\r\n                throw new Error(`Unknown entity type: ${entity}`);\r\n        }\r\n    }\r\n\r\n    public async listRecipes(inputParams: ListRecipeParams): Promise<ListRecipesResponse> {\r\n        const {familyId, limit, lastEvaluatedKey } = inputParams;\r\n        const pkValue = Database.makePK(EntityType.Family, familyId);\r\n        const skPrefixValue = Database.makeSK(EntityType.Recipe,'RECIPE#');\r\n\r\n\r\n        let params: QueryCommandInput = {\r\n            TableName: this.tableName,\r\n            KeyConditionExpression: 'PK = :pk and begins_with(SK, :skPrefix)', // Query for all recipes under the family\r\n            ExpressionAttributeValues: {\r\n                \":pk\": { S: pkValue },\r\n                \":skPrefix\": { S: skPrefixValue }\r\n            },\r\n            Limit: limit ?? 10\r\n        };\r\n\r\n        if(lastEvaluatedKey) {\r\n            params.ExclusiveStartKey= lastEvaluatedKey // For pagination, pass the LastEvaluatedKey from the previous query\r\n        }\r\n    \r\n        try {\r\n            const result = await this.dynamoDB.send(new QueryCommand(params)); // Use QueryCommand and client.send()\r\n\r\n            console.log(`Result of query: ${JSON.stringify(result)}`);\r\n\r\n            if (!result.Items || result.Items.length === 0) return {recipes: []};\r\n    \r\n          const recipes = result.Items.map((item) => unmarshall(item) as DBRecipe);\r\n\r\n          const response: ListRecipesResponse = {\r\n            recipes,\r\n          };\r\n\r\n          if(result.LastEvaluatedKey) {\r\n            response.lastEvaluatedKey = result.LastEvaluatedKey;\r\n          }\r\n          return response;\r\n        } catch (error) {\r\n            console.error(\"Error querying recipes:\", error);\r\n            throw error;\r\n        }\r\n    }\r\n\r\n\r\n    public async createRecipe(params: CreateRecipeParams): Promise<void> {\r\n        // Implement the createRecipe method     \r\n        const {familyId, familyName, preparation, recipeName, ingredients} = params;\r\n        const timestamp = new Date().toISOString();\r\n        const recipeId = v4();\r\n       \r\n        const recipeToInsert: DBRecipe = {\r\n            familyId,\r\n            faimilyName: familyName, \r\n            createdAt: timestamp,\r\n            updatedAt: timestamp,\r\n            entityType: EntityType.User,\r\n            PK: Database.makePK(EntityType.Recipe, familyId),\r\n            SK: Database.makeSK(EntityType.Recipe, recipeId),\r\n            id: recipeId,\r\n            name: recipeName,\r\n            preparation,\r\n        }\r\n        if(ingredients) {\r\n            recipeToInsert.ingredients = ingredients;\r\n        }\r\n\r\n        await this.dynamoDB.send(\r\n            new PutItemCommand({\r\n                TableName: this.tableName, // Replace with actual table name\r\n                Item: marshall(recipeToInsert),\r\n            })\r\n        );\r\n    }\r\n\r\n    public async createUser(username: string, password: string, familyId: string, familyName: string) {\r\n        const userId = v4();\r\n        const salt = randomBytes(16).toString(\"hex\");\r\n        const hashedPassword = hashPassword(password, salt);\r\n        const timestamp = new Date().toISOString();\r\n    \r\n    \r\n        const dbUser: DBUser = {\r\n            familyId,\r\n            faimilyName: familyName, // Fixing the typo\r\n            password: `${salt}$${hashedPassword}`, // Storing salt with the hash\r\n            createdAt: timestamp,\r\n            updatedAt: timestamp,\r\n            entityType: EntityType.User,\r\n            PK: Database.makePK(EntityType.User, username),\r\n            SK: Database.makeSK(EntityType.User, username),\r\n            id: userId,\r\n            name: username\r\n        };\r\n    \r\n        await this.dynamoDB.send(\r\n            new PutItemCommand({\r\n                TableName: this.tableName, // Replace with actual table name\r\n                Item: marshall(dbUser),\r\n            })\r\n        );\r\n    }\r\n\r\n    public async createFamily(familyName: string) {\r\n        const familyId = v4();\r\n\r\n        const timestamp = new Date().toISOString();\r\n\r\n        const dbFamily: DBFamily = {\r\n            id: familyId,\r\n            name: familyName,\r\n            PK: Database.makePK(EntityType.Family, familyId),\r\n            SK: Database.makeSK(EntityType.Family, familyName),\r\n            createdAt: timestamp,\r\n            updatedAt: timestamp,\r\n            entityType: EntityType.Family\r\n        }\r\n\r\n        console.log(`Creating family: ${JSON.stringify(dbFamily)}`);\r\n        await this.dynamoDB.send(\r\n            new PutItemCommand({\r\n                TableName: this.tableName, \r\n                Item: marshall(dbFamily),\r\n            })\r\n        );\r\n    }\r\n\r\n    public async createSecret() {\r\n          // Generate an EC key pair (P-256)\r\n          const { privateKey, publicKey } = generateKeyPairSync(\"ec\", {\r\n            namedCurve: \"P-256\", // Strong and efficient\r\n            publicKeyEncoding: { type: \"spki\", format: \"pem\" },\r\n            privateKeyEncoding: { type: \"pkcs8\", format: \"pem\" },\r\n        });\r\n\r\n        const keyId = v4();\r\n        const timestamp = new Date().toISOString();\r\n\r\n        const privateKeyFields: DBSecret = {\r\n            PK: Database.makePK(EntityType.Secret, 'PEM'),\r\n            SK: Database.makeSK(EntityType.Secret, \"PRIVATE\"),\r\n            id: keyId,\r\n            createdAt: timestamp,\r\n            updatedAt: timestamp,\r\n            secret: privateKey,\r\n            name: 'Private-PEM',\r\n            entityType: EntityType.Secret\r\n        }\r\n        await this.dynamoDB.send(\r\n            new PutItemCommand({\r\n                TableName: this.tableName, // Replace with your table name\r\n                Item: marshall(privateKeyFields),\r\n            })\r\n        );\r\n\r\n        const publicKeyFields: DBSecret = {\r\n            PK: Database.makePK(EntityType.Secret, 'PEM'),\r\n            SK: Database.makeSK(EntityType.Secret, `PUBLIC#${keyId}`),\r\n            id: keyId,\r\n            createdAt: timestamp,\r\n            updatedAt: timestamp,\r\n            secret: publicKey,\r\n            name: 'Public-PEM',\r\n            entityType: EntityType.Secret\r\n        }\r\n\r\n        await this.dynamoDB.send(\r\n            new PutItemCommand({\r\n                TableName: this.tableName, \r\n                Item: marshall(publicKeyFields),\r\n            })\r\n        );\r\n    }\r\n\r\n    public async getUser(username: string): Promise<DBUser> {\r\n        const params = {\r\n            TableName: this.tableName, \r\n            Key: marshall({\r\n                PK: Database.makePK(EntityType.User, username), // The PK is unique for each user based on the username\r\n                SK: Database.makePK(EntityType.User, username), // You can optionally use SK if you want, but it should match the same value in this case\r\n            }),\r\n        };\r\n       \r\n        try {\r\n            const result = await this.dynamoDB.send(new GetItemCommand(params));\r\n            \r\n            if (result.Item) {\r\n                const user: DBUser = unmarshall(result.Item) as DBUser;\r\n                return user; // Return the user object\r\n            } else {\r\n                console.log(\"User not found.\");\r\n                throw new Error('User not found');\r\n            }\r\n        } catch (error) {\r\n            console.error(\"Error retrieving user:\", error);\r\n            throw new Error(\"Failed to retrieve user.\");\r\n        }\r\n    }\r\n\r\n    public async getPublicSecrets(): Promise<{ keyId: string; publicKey: string }[]> {\r\n        try {\r\n            const pkValue = Database.makePK(EntityType.Secret, \"PEM\");\r\n            const skPrefixValue = Database.makeSK(EntityType.Secret, \"PUBLIC#\");\r\n        \r\n            const params: QueryCommandInput = {\r\n                TableName: this.tableName,\r\n                KeyConditionExpression: \"PK = :pk AND begins_with(SK, :skPrefix)\",  \r\n                ExpressionAttributeValues: {\r\n                    \":pk\": { S: pkValue },\r\n                    \":skPrefix\": { S: skPrefixValue }\r\n                }\r\n            };\r\n        \r\n            const result = await this.dynamoDB.send(\r\n                new QueryCommand(params)\r\n            );\r\n    \r\n            if (!result.Items || result.Items.length === 0) return [];\r\n    \r\n            return result.Items.map((item) => {\r\n                const secret = unmarshall(item) as DBSecret;\r\n                return { keyId: secret.id, publicKey: secret.secret };\r\n            });\r\n        } catch (error) {\r\n            console.error(\"Error fetching public secrets:\", error);\r\n            throw new Error(\"Failed to retrieve public keys\");\r\n        }\r\n    }\r\n\r\n    public async getPrivateSecret(): Promise<string | null> {\r\n        try {\r\n            const result = await this.dynamoDB.send(\r\n                new GetItemCommand({\r\n                    TableName: this.tableName,\r\n                    Key: marshall({\r\n                        PK: Database.makePK(EntityType.Secret, \"PEM\"),\r\n                        SK: Database.makeSK(EntityType.Secret, \"PRIVATE\"),\r\n                    }),\r\n                })\r\n            );\r\n    \r\n            if (!result.Item) return null;\r\n    \r\n            const secret = unmarshall(result.Item) as DBSecret;\r\n            return secret.secret; // Returns the private key\r\n        } catch (error) {\r\n            console.error(\"Error fetching private secret:\", error);\r\n            throw new Error(\"Failed to retrieve private key\");\r\n        }\r\n    }\r\n}\r\n\r\nexport function hashPassword(password: string, salt: string): string {\r\n    return createHmac(\"sha256\", salt).update(password).digest(\"hex\");\r\n}", "import validate from './validate.js';\nconst byteToHex = [];\nfor (let i = 0; i < 256; ++i) {\n    byteToHex.push((i + 0x100).toString(16).slice(1));\n}\nexport function unsafeStringify(arr, offset = 0) {\n    return (byteToHex[arr[offset + 0]] +\n        byteToHex[arr[offset + 1]] +\n        byteToHex[arr[offset + 2]] +\n        byteToHex[arr[offset + 3]] +\n        '-' +\n        byteToHex[arr[offset + 4]] +\n        byteToHex[arr[offset + 5]] +\n        '-' +\n        byteToHex[arr[offset + 6]] +\n        byteToHex[arr[offset + 7]] +\n        '-' +\n        byteToHex[arr[offset + 8]] +\n        byteToHex[arr[offset + 9]] +\n        '-' +\n        byteToHex[arr[offset + 10]] +\n        byteToHex[arr[offset + 11]] +\n        byteToHex[arr[offset + 12]] +\n        byteToHex[arr[offset + 13]] +\n        byteToHex[arr[offset + 14]] +\n        byteToHex[arr[offset + 15]]).toLowerCase();\n}\nfunction stringify(arr, offset = 0) {\n    const uuid = unsafeStringify(arr, offset);\n    if (!validate(uuid)) {\n        throw TypeError('Stringified UUID is invalid');\n    }\n    return uuid;\n}\nexport default stringify;\n", "import { randomFillSync } from 'crypto';\nconst rnds8Pool = new Uint8Array(256);\nlet poolPtr = rnds8Pool.length;\nexport default function rng() {\n    if (poolPtr > rnds8Pool.length - 16) {\n        randomFillSync(rnds8Pool);\n        poolPtr = 0;\n    }\n    return rnds8Pool.slice(poolPtr, (poolPtr += 16));\n}\n", "import { randomUUID } from 'crypto';\nexport default { randomUUID };\n", "import native from './native.js';\nimport rng from './rng.js';\nimport { unsafeStringify } from './stringify.js';\nfunction v4(options, buf, offset) {\n    if (native.randomUUID && !buf && !options) {\n        return native.randomUUID();\n    }\n    options = options || {};\n    const rnds = options.random ?? options.rng?.() ?? rng();\n    if (rnds.length < 16) {\n        throw new Error('Random bytes length must be >= 16');\n    }\n    rnds[6] = (rnds[6] & 0x0f) | 0x40;\n    rnds[8] = (rnds[8] & 0x3f) | 0x80;\n    if (buf) {\n        offset = offset || 0;\n        if (offset < 0 || offset + 16 > buf.length) {\n            throw new RangeError(`UUID byte range ${offset}:${offset + 15} is out of buffer bounds`);\n        }\n        for (let i = 0; i < 16; ++i) {\n            buf[offset + i] = rnds[i];\n        }\n        return buf;\n    }\n    return unsafeStringify(rnds);\n}\nexport default v4;\n"],
  "mappings": "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",
  "names": ["import_crypto", "import_crypto", "EntityType"]
}
